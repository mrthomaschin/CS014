{"changed":true,"filter":false,"title":"indexed_sorting.cc","tooltip":"/indexed_sorting.cc","value":"#include <iostream>\n#include <gtest/gtest.h>\n#include <string>\n#include <iomanip>\n\nusing namespace std;\n\n/// Basic implementation for bubble sort with two nested loops.\n/// The outer loop defines the range that is not yet sorted and the inner loop\n/// passes over the unsorted range and swaps every unordered pair\n/// You do not have to use the optimization heuristics that we described in class\n/// but you can implement them if you would like.\ntemplate <typename T>\nvoid bubbleSort(vector<T>& a) {\n  // TODO\n}\n\n/// In insertion sort, we start with an array of one element and then we keep\n/// expanding this array element-by-element while ensuring the array is sorted\n/// after adding each element\ntemplate <typename T>\nvoid insertionSort(vector<T>& a) {\n  // TODO\n}\n\n/// Selection sort makes n-1 passes over the array where in iteration i it selects\n/// the i-th smallest element and places it in its correct position in the array.\ntemplate <typename T>\nvoid selectionSort(vector<T>& a) {\n\t// TODO\n}\n\n/// Implement the original Shell sort algorithm which uses gaps of sizes\n/// n/2, n/4, ..., 1\ntemplate <typename T>\nvoid shellSort1(vector<T>& a) {\n\t// TODO\n}\n\n/// Use Hibbard's increments for the gaps which are in the form of 2^k-1\n/// Find more details on page 298 of the book\ntemplate <typename T>\nvoid shellSort2(vector<T>& a) {\n\t// TODO (Optional 10% bonus)\n}\n\n/// Check whether an array is sorted or not\ntemplate <typename T>\nbool isSorted(vector<T> a) {\n\tfor (int i = 0; i < a.size() - 1; i++) {\n\t\tif (a[i] > a[i+1]) {\n\t\t\tcout << \"Elements a[\" << i << \"]= \"<< a[i] << \" and a[\"<<(i+1)<<\"] = \" << a[i+1] << \" are out of order\" << endl;\n\t\t  return false;\n\t\t}\n\t}\n\treturn true;\n}\n\nint main() {\n\t// Simple test for sorting algorithms\n\tvector<int> values = {10, 3, 5, 7, 2, 1, 15, 13};\n\tvector<int> temp = values;\n\tbubbleSort(temp);\n\tEXPECT_TRUE(isSorted(temp));\n\t\n\ttemp = values;\n\tinsertionSort(temp);\n\tEXPECT_TRUE(isSorted(temp));\n\n\ttemp = values;\n\tselectionSort(temp);\n\tEXPECT_TRUE(isSorted(temp));\n\n\ttemp = values;\n\tshellSort1(temp);\n\tEXPECT_TRUE(isSorted(temp));\n\t\n\t// Measure the running time as the input size increases\n\tcout << right << setw(16)  << \"Size\"\n\t     << setw(16)  << \"Bubble\"\n\t     << setw(16)  << \"Insertion\"\n\t     << setw(16)  << \"Selection\"\n\t     << setw(16)  << \"Shell 1\"\n\t     << setw(16)  << \"Shell 2\" << endl;\n\n\tfor (int n = 1; n <= (1<<16); n *= 2) {\n\t\tcout << setw(16) << right << n;\n\t\tvalues.clear();\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tvalues.push_back(random());\n\t\ttemp = values;\n\t\tclock_t begin = clock(); // Start the stopwatch\n\t\tbubbleSort(temp);\n\t\tclock_t end = clock(); // Stop the stopwatch\n    double elapsed_time = double(end - begin) / CLOCKS_PER_SEC;\n    cout << setw(16) << elapsed_time;\n\n\t\ttemp = values;\n\t\tbegin = clock();\n\t\tinsertionSort(temp);\n\t\tend = clock();\n\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;\n    cout << setw(16) << elapsed_time;\n\n\t\ttemp = values;\n\t\tbegin = clock();\n\t\tselectionSort(temp);\n\t\tend = clock();\n\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;\n    cout << setw(16) << elapsed_time;\n\n\t\ttemp = values;\n\t\tbegin = clock();\n\t\tshellSort1(temp);\n\t\tend = clock();\n\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;\n    cout << setw(16) << elapsed_time;\n\n\t\ttemp = values;\n\t\tbegin = clock();\n\t\tshellSort2(temp);\n\t\tend = clock();\n\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;\n    cout << setw(16) << elapsed_time;\n    \n    cout << endl;\n\t}\n\t\n\treturn 0;\n}\n","undoManager":{"mark":99,"position":100,"stack":[[{"start":{"row":27,"column":8},"end":{"row":27,"column":9},"action":"insert","lines":["c"],"id":7354}],[{"start":{"row":27,"column":9},"end":{"row":27,"column":10},"action":"insert","lines":["o"],"id":7355}],[{"start":{"row":27,"column":10},"end":{"row":27,"column":11},"action":"insert","lines":["u"],"id":7356}],[{"start":{"row":27,"column":11},"end":{"row":27,"column":12},"action":"insert","lines":["t"],"id":7357}],[{"start":{"row":27,"column":12},"end":{"row":27,"column":13},"action":"insert","lines":[" "],"id":7358}],[{"start":{"row":27,"column":13},"end":{"row":27,"column":14},"action":"insert","lines":["<"],"id":7359}],[{"start":{"row":27,"column":14},"end":{"row":27,"column":15},"action":"insert","lines":["<"],"id":7360}],[{"start":{"row":27,"column":15},"end":{"row":27,"column":16},"action":"insert","lines":[" "],"id":7361}],[{"start":{"row":27,"column":16},"end":{"row":27,"column":17},"action":"insert","lines":["l"],"id":7362}],[{"start":{"row":27,"column":17},"end":{"row":27,"column":18},"action":"insert","lines":["o"],"id":7363}],[{"start":{"row":27,"column":18},"end":{"row":27,"column":19},"action":"insert","lines":["w"],"id":7364}],[{"start":{"row":27,"column":19},"end":{"row":27,"column":20},"action":"insert","lines":["e"],"id":7365}],[{"start":{"row":27,"column":20},"end":{"row":27,"column":21},"action":"insert","lines":["r"],"id":7366}],[{"start":{"row":27,"column":16},"end":{"row":27,"column":21},"action":"remove","lines":["lower"],"id":7367},{"start":{"row":27,"column":16},"end":{"row":27,"column":23},"action":"insert","lines":["lowerC1"]}],[{"start":{"row":27,"column":23},"end":{"row":27,"column":24},"action":"insert","lines":[" "],"id":7368}],[{"start":{"row":27,"column":24},"end":{"row":27,"column":25},"action":"insert","lines":["<"],"id":7369}],[{"start":{"row":27,"column":25},"end":{"row":27,"column":26},"action":"insert","lines":["<"],"id":7370}],[{"start":{"row":27,"column":26},"end":{"row":27,"column":27},"action":"insert","lines":[" "],"id":7371}],[{"start":{"row":27,"column":27},"end":{"row":27,"column":28},"action":"insert","lines":["e"],"id":7372}],[{"start":{"row":27,"column":28},"end":{"row":27,"column":29},"action":"insert","lines":["n"],"id":7373}],[{"start":{"row":27,"column":29},"end":{"row":27,"column":30},"action":"insert","lines":["d"],"id":7374}],[{"start":{"row":27,"column":30},"end":{"row":27,"column":31},"action":"insert","lines":["l"],"id":7375}],[{"start":{"row":27,"column":31},"end":{"row":27,"column":32},"action":"insert","lines":[";"],"id":7376}],[{"start":{"row":28,"column":72},"end":{"row":29,"column":0},"action":"insert","lines":["",""],"id":7377},{"start":{"row":29,"column":0},"end":{"row":29,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":29,"column":8},"end":{"row":29,"column":32},"action":"insert","lines":["cout << lowerC1 << endl;"],"id":7378}],[{"start":{"row":29,"column":22},"end":{"row":29,"column":23},"action":"remove","lines":["1"],"id":7379},{"start":{"row":29,"column":22},"end":{"row":29,"column":23},"action":"insert","lines":["2"]}],[{"start":{"row":28,"column":57},"end":{"row":28,"column":58},"action":"remove","lines":["-"],"id":7380},{"start":{"row":28,"column":57},"end":{"row":28,"column":58},"action":"insert","lines":["+"]}],[{"start":{"row":26,"column":57},"end":{"row":26,"column":58},"action":"remove","lines":["-"],"id":7381},{"start":{"row":26,"column":57},"end":{"row":26,"column":58},"action":"insert","lines":["+"]}],[{"start":{"row":27,"column":0},"end":{"row":28,"column":0},"action":"remove","lines":["        cout << lowerC1 << endl;",""],"id":7382}],[{"start":{"row":28,"column":0},"end":{"row":29,"column":0},"action":"remove","lines":["        cout << lowerC2 << endl;",""],"id":7383}],[{"start":{"row":52,"column":4},"end":{"row":52,"column":5},"action":"remove","lines":["/"],"id":7384}],[{"start":{"row":52,"column":4},"end":{"row":52,"column":5},"action":"remove","lines":["*"],"id":7385}],[{"start":{"row":58,"column":4},"end":{"row":58,"column":5},"action":"remove","lines":["*"],"id":7386}],[{"start":{"row":58,"column":4},"end":{"row":58,"column":5},"action":"remove","lines":["/"],"id":7387}],[{"start":{"row":51,"column":4},"end":{"row":51,"column":5},"action":"insert","lines":["/"],"id":7388}],[{"start":{"row":51,"column":5},"end":{"row":51,"column":6},"action":"insert","lines":["*"],"id":7389}],[{"start":{"row":51,"column":5},"end":{"row":51,"column":6},"action":"remove","lines":["*"],"id":7390}],[{"start":{"row":51,"column":4},"end":{"row":51,"column":5},"action":"remove","lines":["/"],"id":7391}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"insert","lines":["/"],"id":7392}],[{"start":{"row":53,"column":5},"end":{"row":53,"column":6},"action":"insert","lines":["*"],"id":7393}],[{"start":{"row":52,"column":33},"end":{"row":52,"column":34},"action":"insert","lines":[";"],"id":7394}],[{"start":{"row":54,"column":33},"end":{"row":54,"column":34},"action":"insert","lines":[";"],"id":7395}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"remove","lines":["/"],"id":7396}],[{"start":{"row":53,"column":4},"end":{"row":53,"column":5},"action":"remove","lines":["*"],"id":7397}],[{"start":{"row":55,"column":4},"end":{"row":55,"column":5},"action":"insert","lines":["/"],"id":7398}],[{"start":{"row":55,"column":5},"end":{"row":55,"column":6},"action":"insert","lines":["*"],"id":7399}],[{"start":{"row":55,"column":4},"end":{"row":55,"column":5},"action":"remove","lines":["/"],"id":7400}],[{"start":{"row":55,"column":4},"end":{"row":55,"column":5},"action":"remove","lines":["*"],"id":7401}],[{"start":{"row":62,"column":4},"end":{"row":62,"column":5},"action":"remove","lines":["/"],"id":7402}],[{"start":{"row":62,"column":4},"end":{"row":62,"column":5},"action":"remove","lines":["*"],"id":7403}],[{"start":{"row":70,"column":34},"end":{"row":70,"column":35},"action":"remove","lines":["/"],"id":7404}],[{"start":{"row":70,"column":33},"end":{"row":70,"column":34},"action":"remove","lines":["*"],"id":7405}],[{"start":{"row":62,"column":4},"end":{"row":62,"column":15},"action":"remove","lines":["EXPECT_TRUE"],"id":7406},{"start":{"row":62,"column":4},"end":{"row":62,"column":16},"action":"insert","lines":["EXPECT_FALSE"]}],[{"start":{"row":63,"column":4},"end":{"row":63,"column":16},"action":"remove","lines":["EXPECT_FALSE"],"id":7407},{"start":{"row":63,"column":4},"end":{"row":63,"column":15},"action":"insert","lines":["EXPECT_TRUE"]}],[{"start":{"row":63,"column":0},"end":{"row":64,"column":0},"action":"remove","lines":["    EXPECT_TRUE(cslt('B', 'a'));",""],"id":7408}],[{"start":{"row":62,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["    EXPECT_TRUE(cslt('B', 'a'));",""],"id":7409}],[{"start":{"row":56,"column":34},"end":{"row":57,"column":0},"action":"insert","lines":["",""],"id":7410},{"start":{"row":57,"column":0},"end":{"row":57,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":57,"column":4},"end":{"row":57,"column":32},"action":"insert","lines":["EXPECT_TRUE(cslt('A', 'a'));"],"id":7411}],[{"start":{"row":57,"column":17},"end":{"row":57,"column":18},"action":"insert","lines":["i"],"id":7412}],[{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["    /*",""],"id":7413}],[{"start":{"row":89,"column":4},"end":{"row":89,"column":5},"action":"insert","lines":["/"],"id":7414}],[{"start":{"row":89,"column":5},"end":{"row":89,"column":6},"action":"insert","lines":["*"],"id":7415}],[{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"remove","lines":["-"],"id":7416}],[{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"remove","lines":["1"],"id":7417}],[{"start":{"row":40,"column":51},"end":{"row":40,"column":52},"action":"insert","lines":["-"],"id":7418}],[{"start":{"row":40,"column":52},"end":{"row":40,"column":53},"action":"insert","lines":["1"],"id":7419}],[{"start":{"row":89,"column":0},"end":{"row":90,"column":0},"action":"remove","lines":["    /*",""],"id":7420}],[{"start":{"row":99,"column":6},"end":{"row":99,"column":7},"action":"remove","lines":["/"],"id":7421}],[{"start":{"row":99,"column":5},"end":{"row":99,"column":6},"action":"remove","lines":["*"],"id":7422}],[{"start":{"row":88,"column":5},"end":{"row":89,"column":0},"action":"insert","lines":["",""],"id":7423},{"start":{"row":89,"column":0},"end":{"row":89,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":59,"column":0},"end":{"row":60,"column":4},"action":"remove","lines":["    ","    "],"id":7424}],[{"start":{"row":47,"column":20},"end":{"row":48,"column":4},"action":"remove","lines":["","    "],"id":7425}],[{"start":{"row":19,"column":15},"end":{"row":19,"column":22},"action":"remove","lines":["c1 < c2"],"id":7426},{"start":{"row":19,"column":15},"end":{"row":19,"column":16},"action":"insert","lines":["f"]}],[{"start":{"row":19,"column":16},"end":{"row":19,"column":17},"action":"insert","lines":["a"],"id":7427}],[{"start":{"row":19,"column":17},"end":{"row":19,"column":18},"action":"insert","lines":["l"],"id":7428}],[{"start":{"row":19,"column":18},"end":{"row":19,"column":19},"action":"insert","lines":["s"],"id":7429}],[{"start":{"row":19,"column":19},"end":{"row":19,"column":20},"action":"insert","lines":["e"],"id":7430}],[{"start":{"row":26,"column":8},"end":{"row":27,"column":72},"action":"remove","lines":["char lowerC1 = c1 >= 'a' && c1 <= 'z' ? c1 : (c1 + ('a' - 'A'));","        char lowerC2 = c2 >= 'a' && c2 <= 'z' ? c2 : (c2 + ('a' - 'A'));"],"id":7431}],[{"start":{"row":26,"column":8},"end":{"row":27,"column":0},"action":"remove","lines":["",""],"id":7432}],[{"start":{"row":26,"column":8},"end":{"row":26,"column":12},"action":"remove","lines":["    "],"id":7433}],[{"start":{"row":26,"column":8},"end":{"row":26,"column":12},"action":"remove","lines":["    "],"id":7434}],[{"start":{"row":26,"column":15},"end":{"row":26,"column":63},"action":"remove","lines":["lowerC1 == lowerC2 ? c1 < c2 : lowerC1 < lowerC2"],"id":7435},{"start":{"row":26,"column":15},"end":{"row":26,"column":16},"action":"insert","lines":["f"]}],[{"start":{"row":26,"column":16},"end":{"row":26,"column":17},"action":"insert","lines":["a"],"id":7436}],[{"start":{"row":26,"column":17},"end":{"row":26,"column":18},"action":"insert","lines":["l"],"id":7437}],[{"start":{"row":26,"column":18},"end":{"row":26,"column":19},"action":"insert","lines":["s"],"id":7438}],[{"start":{"row":26,"column":19},"end":{"row":26,"column":20},"action":"insert","lines":["e"],"id":7439}],[{"start":{"row":33,"column":4},"end":{"row":41,"column":5},"action":"remove","lines":["for (int i = 0; i < indexes.size(); i++) {","        indexes[i] = i;","    }","    for (int i = 1; i < a.size(); i++) {","        for (int j = 1; j < a.size(); j++) {","            if (lessthan(a[indexes[j]], a[indexes[j-1]]))","                swap(indexes[j-1], indexes[j]);","        }","    }"],"id":7440}],[{"start":{"row":32,"column":0},"end":{"row":34,"column":0},"action":"remove","lines":["    vector<int> indexes(a.size());","    ",""],"id":7441}],[{"start":{"row":32,"column":11},"end":{"row":32,"column":18},"action":"remove","lines":["indexes"],"id":7442},{"start":{"row":32,"column":11},"end":{"row":32,"column":12},"action":"insert","lines":["v"]}],[{"start":{"row":32,"column":12},"end":{"row":32,"column":13},"action":"insert","lines":["e"],"id":7443}],[{"start":{"row":32,"column":13},"end":{"row":32,"column":14},"action":"insert","lines":["c"],"id":7444}],[{"start":{"row":32,"column":14},"end":{"row":32,"column":15},"action":"insert","lines":["t"],"id":7445}],[{"start":{"row":32,"column":15},"end":{"row":32,"column":16},"action":"insert","lines":["o"],"id":7446}],[{"start":{"row":32,"column":16},"end":{"row":32,"column":17},"action":"insert","lines":["r"],"id":7447}],[{"start":{"row":32,"column":17},"end":{"row":32,"column":18},"action":"insert","lines":["<"],"id":7448}],[{"start":{"row":32,"column":18},"end":{"row":32,"column":19},"action":"insert","lines":["i"],"id":7449}],[{"start":{"row":32,"column":19},"end":{"row":32,"column":20},"action":"insert","lines":["n"],"id":7450}],[{"start":{"row":32,"column":20},"end":{"row":32,"column":21},"action":"insert","lines":["t"],"id":7451}],[{"start":{"row":32,"column":21},"end":{"row":32,"column":22},"action":"insert","lines":[">"],"id":7452}],[{"start":{"row":32,"column":22},"end":{"row":32,"column":24},"action":"insert","lines":["()"],"id":7453}],[{"start":{"row":0,"column":0},"end":{"row":94,"column":0},"action":"remove","lines":["#include <iostream>","#include <gtest/gtest.h>","#include <algorithm>","#include <random>","","using namespace std;","","void generate_random_characters(vector<char>& values) {","    for (int i = 0; i < 26; i++) {","\t\tvalues[i] = i + 'A';","\t\tvalues[i+26] = i + 'a';","\t}","\tauto rng = std::default_random_engine {};","\tstd::shuffle(std::begin(values), std::end(values), rng);","}","","struct CaseSensitiveLessThan {","    // Return ture if c1 is less than c2 (case sensitive comparison)","    bool operator()(char c1, char c2) {","        return false;","    }","};","","struct CaseInsensitiveLessThan {","    // Return ture if c1 is less than c2 (case insensitive comparison)","    bool operator()(char c1, char c2) {","        return false;","    }","};","","template <typename T, typename Comparator>","vector<int> indexedSort(const vector<T>& a, Comparator lessthan) {","    return vector<int>();","}","","void testSorting() {","    // Test case insensitive comparator","    CaseInsensitiveLessThan cislt;","    EXPECT_TRUE(cislt('a', 'B'));","    EXPECT_FALSE(cislt('B', 'a'));","    EXPECT_TRUE(cislt('a', 'b'));","    EXPECT_FALSE(cislt('b', 'a'));","    EXPECT_TRUE(cislt('a', 'Z'));","    EXPECT_FALSE(cislt('Z', 'a'));","    EXPECT_TRUE(cislt('A', 'a'));","    EXPECT_FALSE(cislt('a', 'a'));","","    // Test case sensitive comparator","    CaseSensitiveLessThan cslt;","    EXPECT_TRUE(cslt('B', 'a'));","    EXPECT_FALSE(cslt('a', 'B'));","    EXPECT_TRUE(cslt('A', 'B'));","    EXPECT_FALSE(cslt('B', 'A'));","    EXPECT_TRUE(cslt('Z', 'a'));","    EXPECT_FALSE(cslt('a', 'Z'));","    EXPECT_TRUE(cslt('A', 'a'));","    EXPECT_FALSE(cslt('a', 'A'));","    EXPECT_FALSE(cslt('a', 'a'));","","    // Generate a list of random numbers","    int size = 26 * 2;","    vector<char> values(size);","    generate_random_characters(values);","    ","    // Test case sensitive","    vector<char> temp = values;","    vector<int> indexes = indexedSort(values, cslt);","    // Test sorted","    for (int i = 1; i < indexes.size(); i++) {","        EXPECT_TRUE(cslt(values[indexes[i-1]], values[indexes[i]]));","    }","    // Test the array did not change","    for (int i = 0; i < indexes.size(); i++) {","        EXPECT_EQ(values[i], temp[i]);","    }","    ","    // Test case insensitive","    temp = values;","    indexes = indexedSort(values, cislt);","    // Test sorted","    for (int i = 1; i < indexes.size(); i++) {","        EXPECT_TRUE(cislt(values[indexes[i-1]], values[indexes[i]]));","    }","    // Test the array did not change","    for (int i = 0; i < indexes.size(); i++) {","        EXPECT_EQ(values[i], temp[i]);","    }","}","","int main(){","    testSorting();","    cout << \"End of program\" << endl;","\treturn 0;","}",""],"id":7454},{"start":{"row":0,"column":0},"end":{"row":130,"column":0},"action":"insert","lines":["#include <iostream>","#include <gtest/gtest.h>","#include <string>","#include <iomanip>","","using namespace std;","","/// Basic implementation for bubble sort with two nested loops.","/// The outer loop defines the range that is not yet sorted and the inner loop","/// passes over the unsorted range and swaps every unordered pair","/// You do not have to use the optimization heuristics that we described in class","/// but you can implement them if you would like.","template <typename T>","void bubbleSort(vector<T>& a) {","  // TODO","}","","/// In insertion sort, we start with an array of one element and then we keep","/// expanding this array element-by-element while ensuring the array is sorted","/// after adding each element","template <typename T>","void insertionSort(vector<T>& a) {","  // TODO","}","","/// Selection sort makes n-1 passes over the array where in iteration i it selects","/// the i-th smallest element and places it in its correct position in the array.","template <typename T>","void selectionSort(vector<T>& a) {","\t// TODO","}","","/// Implement the original Shell sort algorithm which uses gaps of sizes","/// n/2, n/4, ..., 1","template <typename T>","void shellSort1(vector<T>& a) {","\t// TODO","}","","/// Use Hibbard's increments for the gaps which are in the form of 2^k-1","/// Find more details on page 298 of the book","template <typename T>","void shellSort2(vector<T>& a) {","\t// TODO (Optional 10% bonus)","}","","/// Check whether an array is sorted or not","template <typename T>","bool isSorted(vector<T> a) {","\tfor (int i = 0; i < a.size() - 1; i++) {","\t\tif (a[i] > a[i+1]) {","\t\t\tcout << \"Elements a[\" << i << \"]= \"<< a[i] << \" and a[\"<<(i+1)<<\"] = \" << a[i+1] << \" are out of order\" << endl;","\t\t  return false;","\t\t}","\t}","\treturn true;","}","","int main() {","\t// Simple test for sorting algorithms","\tvector<int> values = {10, 3, 5, 7, 2, 1, 15, 13};","\tvector<int> temp = values;","\tbubbleSort(temp);","\tEXPECT_TRUE(isSorted(temp));","\t","\ttemp = values;","\tinsertionSort(temp);","\tEXPECT_TRUE(isSorted(temp));","","\ttemp = values;","\tselectionSort(temp);","\tEXPECT_TRUE(isSorted(temp));","","\ttemp = values;","\tshellSort1(temp);","\tEXPECT_TRUE(isSorted(temp));","\t","\t// Measure the running time as the input size increases","\tcout << right << setw(16)  << \"Size\"","\t     << setw(16)  << \"Bubble\"","\t     << setw(16)  << \"Insertion\"","\t     << setw(16)  << \"Selection\"","\t     << setw(16)  << \"Shell 1\"","\t     << setw(16)  << \"Shell 2\" << endl;","","\tfor (int n = 1; n <= (1<<16); n *= 2) {","\t\tcout << setw(16) << right << n;","\t\tvalues.clear();","\t\tfor (int i = 0; i < n; i++)","\t\t\tvalues.push_back(random());","\t\ttemp = values;","\t\tclock_t begin = clock(); // Start the stopwatch","\t\tbubbleSort(temp);","\t\tclock_t end = clock(); // Stop the stopwatch","    double elapsed_time = double(end - begin) / CLOCKS_PER_SEC;","    cout << setw(16) << elapsed_time;","","\t\ttemp = values;","\t\tbegin = clock();","\t\tinsertionSort(temp);","\t\tend = clock();","\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;","    cout << setw(16) << elapsed_time;","","\t\ttemp = values;","\t\tbegin = clock();","\t\tselectionSort(temp);","\t\tend = clock();","\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;","    cout << setw(16) << elapsed_time;","","\t\ttemp = values;","\t\tbegin = clock();","\t\tshellSort1(temp);","\t\tend = clock();","\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;","    cout << setw(16) << elapsed_time;","","\t\ttemp = values;","\t\tbegin = clock();","\t\tshellSort2(temp);","\t\tend = clock();","\t\telapsed_time = double(end - begin) / CLOCKS_PER_SEC;","    cout << setw(16) << elapsed_time;","    ","    cout << endl;","\t}","\t","\treturn 0;","}",""]}]]},"ace":{"folds":[],"scrolltop":1300,"scrollleft":0,"selection":{"start":{"row":130,"column":0},"end":{"row":130,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":91,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1511048692853}